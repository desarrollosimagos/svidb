#!/usr/bin/python -u
# -*- coding: utf-8 -*-
from django.db import models


from listasTematicas.models import *

# Create your models here.

class Tipomiembros(models.Model):
    nombre = models.CharField(max_length=135)
    update = models.DateTimeField(default=datetime.now(),editable = False)
    userupdate = models.ForeignKey(User,verbose_name='Usuario')
    class Meta:
        db_table = u'tipoMiembros'
        verbose_name_plural='Tipo Miembros'
        #app_label = 'Estrategia_Nacional_y_Plan_de_Accion'
        verbose_name = 'Tipo Miembros'
    def __unicode__(self):
        return u"%s" %(self.nombre)

class TipoEventos(models.Model):
    nombre = models.CharField(max_length=135)
    descripcion = models.TextField()
    class Meta:
        db_table = u'tipoEventos'
        verbose_name = 'Tipo Eventos'
        verbose_name_plural='Tipo Eventos'
        #app_label = 'Eventos'
    def __unicode__(self):
        return u"%s" %(self.nombre)

class Modalidads(models.Model):
    nombre = models.CharField(max_length=135)
    update = models.DateTimeField(default=datetime.now(),editable = False)
    descripcion = models.TextField(verbose_name='Descripción')
    userupdate = models.ForeignKey(User,verbose_name='Usuario')
    class Meta:
        db_table = u'modalidads'
        verbose_name_plural='Modalidades'
        verbose_name='Modalidades'
        #app_label = 'Eventos'
    def __unicode__(self):
        return u"%s" %(self.nombre)
		
class Tematicas(models.Model):
    nombre = models.CharField(max_length=135)
    update = models.DateTimeField(default=datetime.now(),editable = False)
    descripcion = models.TextField(verbose_name='Descripción')
    userupdate = models.ForeignKey(User,verbose_name='Usuario')
    class Meta:
        db_table = u'tematicas'
        verbose_name_plural='Temáticas'
        verbose_name='Temáticas'
        #app_label = 'Eventos'
    def __unicode__(self):
        return u"%s" %(self.nombre)

class Eventos(models.Model):
    nombre = models.CharField(max_length=300)
    tipoe = models.ForeignKey(TipoEventos,verbose_name='Tipo Eventos')
    lugar = models.CharField(max_length=100)
    descripcion = models.TextField()
    modalidad = models.ManyToManyField(Modalidads)
    tematicas = models.ManyToManyField(Tematicas)
    pathimg = models.ImageField(upload_to='pathImg',db_column='pathImg',null=True, blank=True) 
    pathimgtop = models.ImageField(upload_to='pathImgTop',db_column='pathImgTop',null=True, blank=True,verbose_name='Header') 
    fecha = models.DateField(null=True, blank=True)
    fechaInicioInscripcion = models.DateField(null=True, blank=True, verbose_name='Fecha Inicio Inscripción')
    fechaFinInscripcion = models.DateField(null=True, blank=True, verbose_name='Fecha Fin Inscripción')
    update = models.DateTimeField(default=datetime.now(),editable = False)
    bancoaudios = models.ManyToManyField(Bancoaudiovisuals,related_name='Bancos Audio Visuales',help_text=u"Por nombre",verbose_name='Banco Audio Visual',null=True, blank=True)
    biblio = models.ManyToManyField(Bibliotecas,related_name='Biblioteca',help_text=u"Por nombre",verbose_name='Bibliotecas',null=True, blank=True)
    userupdate = models.ForeignKey(User,null=True, blank=True,verbose_name='Usuario ')
    estatu = models.IntegerField(choices=((0,'Activo'),(1,'Inactivo'),(2,'Pendiente')),verbose_name='Estatus',null=True,blank=True,db_column='estatu_id')
    opt0 = models.BooleanField(db_column='opt0', blank=True,verbose_name='Inscripcion de Trabajos')
    opt1 = models.BooleanField(db_column='opt1', blank=True,verbose_name='Necesita Inscripcion')
    class Meta:
        db_table = u'eventos'
        verbose_name_plural='Eventos'
        verbose_name='Eventos'
        #app_label = 'Eventos'
    def __unicode__(self):
        return u"%s" %(self.nombre)
		
class Trabajoscongresos(models.Model):
    SHIRT_SIZES = (
        (0,'Activo'),(1,'Inactivo'),(2,'Pendiente'),
    )
    titulo = models.CharField(max_length=300)
    accespecifi = models.ForeignKey(Accionesespecificas,verbose_name='Accion Especifica')
    modalidad = models.ForeignKey(Modalidads)
    tematicas = models.ForeignKey(Tematicas,blank=True,null=True)
    resumen = models.TextField()
    evento = models.ForeignKey(Eventos,null=True, blank=True)
    directorio = models.ForeignKey(Directorios,null=True, blank=True,verbose_name='Autor')
    update = models.DateTimeField(default=datetime.now(),editable = False,null=True, blank=True)
    userupdate = models.ForeignKey(User,null=True, blank=True,verbose_name='Usuario')
    coautores = models.ManyToManyField(Directorios,null=True, blank=True,related_name='Co-Autores')
    colectivos = models.ManyToManyField(Actores,null=True, blank=True,related_name='Colectivos')
    estatu = models.IntegerField(choices=SHIRT_SIZES,verbose_name='Estatus' ,null=True,blank=True,db_column='estatu_id')
    class Meta:
        db_table = u'trabajosCongresos'
        verbose_name_plural='Trabajos Congreso'
        verbose_name='Trabajos Congreso'
        #app_label = 'Eventos'
    def __unicode__(self):
        return u"%s" %(self.titulo)

class Grupotrabajocongresos(models.Model):
    directorio = models.ForeignKey(Directorios)
    trabajoscongreso = models.ForeignKey(Trabajoscongresos,db_column='trabajosCongreso_id')
    update = models.DateTimeField(default=datetime.now(),editable = False)
    userupdate = models.ForeignKey(User,verbose_name='Usuario')
    estatu = models.IntegerField(choices=((0,'Activo'),(1,'Inactivo'),(2,'Pendiente')),verbose_name='Estatus',null=True,blank=True,db_column='estatu_id')
    class Meta:
        db_table = u'grupoTrabajoCongresos'
        verbose_name_plural='Grupos Trabajos Congresos'
        verbose_name='Grupos Trabajos Congresos'
        #app_label = 'Eventos'
    def __unicode__(self):
        return u"%s" %(self.directorio)

class Grupotrabajos(models.Model):
    grupo = models.CharField(max_length=300)
    update = models.DateTimeField(default=datetime.now(),editable = False)
    userupdate = models.ForeignKey(User,verbose_name='Usuario')
    estatu = models.IntegerField(choices=((0,'Activo'),(1,'Inactivo'),(2,'Pendiente')),verbose_name='Estatus',null=True,blank=True,db_column='estatu_id')
    class Meta:
        db_table = u'grupoTrabajos'
        #app_label = 'Estrategia_Nacional_y_Plan_de_Accion'
        verbose_name_plural='Grupos Trabajos'
        verbose_name='Grupos Trabajos'
    def __unicode__(self):
        return u"%s" %(self.grupo)

class RelacionGrupoTrabajoAccionEspecifica(models.Model):
    accionesespecifica = models.ForeignKey(Accionesespecificas,db_column='accionesEspecifica_id')
    grupostrabajos = models.ForeignKey(Grupotrabajos,db_column='grupotrabajo_id')
    class Meta:
        db_table = u'relaciongrupotrabajoaccionespecifica'
        verbose_name_plural='Relación Grupos Trabajos - Acción Específica'
        verbose_name='Relación Grupos Trabajos - Acción Específica'
        #app_label = 'Estrategia_Nacional_y_Plan_de_Accion'
    def __unicode__(self):
        return u"%s" %(self.accionesespecifica)
		

class Miembrosgrupotrabajos(models.Model):
    tipomiembro = models.ForeignKey(Tipomiembros, null=True, db_column='tipoMiembro_id')
    directorio = models.ForeignKey(Directorios, null=True)
    grupotrabajo = models.ForeignKey(Grupotrabajos, null=True, db_column='grupoTrabajo_id')
    update = models.DateTimeField(default=datetime.now(),editable = False)
    userupdate = models.ForeignKey(User,verbose_name='Usuario')
    estatu = models.IntegerField(choices=((0,'Activo'),(1,'Inactivo'),(2,'Pendiente')),verbose_name='Estatus',null=True,blank=True,db_column='estatu_id')
    class Meta:
q        db_table = u'miembrosGrupoTrabajos'
        verbose_name_plural='Miembros Grupos de Trabajo'
        verbose_name='Miembros Grupos de Trabajo'
        #app_label = 'Estrategia_Nacional_y_Plan_de_Accion'
    def __unicode__(self):
        return u"%s" %(self.directorio)
		
		
class participacioEvento(models.Model):
    directorio = models.ForeignKey(Directorios, null=True)
    evento = models.ForeignKey(Eventos,null=True, blank=True)
    class Meta:
        db_table = u'participacioEvento'
        verbose_name_plural='Participacion de Eventos'
        verbose_name='Participacion de Eventos'
    def __unicode__(self):
        return u"%s - %s" %(self.directorio,self.evento)
		
#class ParticipantesPorEventos(models.Model):
#    directorio = models.ForeignKey(Directorios, null=True)
#    grupotrabajo = models.ForeignKey(Eventos, null=True)
#    estatu = models.IntegerField(choices=((0,'Activo'),(1,'Inactivo'),(2,'Pendiente')),verbose_name='Estatus',null=True,blank=True,db_column='estatu_id')
#    class Meta:
#        verbose_name_plural='Participantes por Eventos'
#        verbose_name='Participantes por Eventos'
        #app_label = 'Estrategia_Nacional_y_Plan_de_Accion'
#    def __unicode__(self):
#        return u"%s" %(self.directorio)


